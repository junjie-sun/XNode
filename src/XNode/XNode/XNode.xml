<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XNode</name>
    </assembly>
    <members>
        <member name="T:XNode.Client.Configuration.ActionInfo">
            <summary>
            Action配置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ActionInfo.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ActionInfo.Name">
            <summary>
            Action名称
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ActionInfo.Timeout">
            <summary>
            超时时长（毫秒），默认30000毫秒
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ActionInfo.Enabled">
            <summary>
            Action是否启用
            配置中设置的Enabled优先级大于Attribute中的设置
            </summary>
        </member>
        <member name="T:XNode.Client.Configuration.ClientConfig">
            <summary>
            客户端配置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ClientConfig.ServiceProxies">
            <summary>
            服务代理列表
            </summary>
        </member>
        <member name="T:XNode.Client.Configuration.ConnectionInfo">
            <summary>
            连接配置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ConnectionInfo.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ConnectionInfo.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ConnectionInfo.LocalHost">
            <summary>
            本地绑定地址
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ConnectionInfo.LocalPort">
            <summary>
            本地绑定IP
            </summary>
        </member>
        <member name="T:XNode.Client.Configuration.ServiceInfo">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceInfo.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceInfo.Name">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceInfo.Enabled">
            <summary>
            当前服务下的所有Action是否启用
            配置中设置的Enabled优先级大于Attribute中的设置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceInfo.Actions">
            <summary>
            Action列表
            </summary>
        </member>
        <member name="T:XNode.Client.Configuration.ServiceProxyConfig">
            <summary>
            服务代理配置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceProxyConfig.ProxyName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceProxyConfig.Connections">
            <summary>
            连接配置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceProxyConfig.Services">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="P:XNode.Client.Configuration.ServiceProxyConfig.ProxyTypes">
            <summary>
            代理类型
            </summary>
        </member>
        <member name="T:XNode.Client.Configuration.ConfigurationExtensions">
            <summary>
            Client配置扩展方法类
            </summary>
        </member>
        <member name="M:XNode.Client.Configuration.ConfigurationExtensions.GetClientConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Client配置
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.Configuration.ConfigurationExtensions.GetDefaultLoginHandlerConfig(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            获取默认LoginHandler配置
            </summary>
            <param name="config"></param>
            <param name="proxyName"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.Configuration.ConfigurationExtensions.GetDefaultPassiveClosedStrategyConfig(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            获取默认客户端被动关闭处理策略配置
            </summary>
            <param name="config"></param>
            <param name="proxyName"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.DefaultNodeClient">
            <summary>
            NodeClient默认实现
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultNodeClient.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultNodeClient.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultNodeClient.LocalHost">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultNodeClient.LocalPort">
            <summary>
            本地端口
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultNodeClient.Serializer">
            <summary>
            序列化器
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultNodeClient.ProtocolStackFactory">
            <summary>
            协议栈工厂
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultNodeClient.IsConnected">
            <summary>
            是否与服务端连接成功
            </summary>
        </member>
        <member name="M:XNode.Client.DefaultNodeClient.#ctor(XNode.Client.NodeClientParameters)">
            <summary>
            构造函数
            </summary>
            <param name="parameters">NodeClient参数信息</param>
        </member>
        <member name="M:XNode.Client.DefaultNodeClient.ConnectAsync">
            <summary>
            与服务端创建连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.DefaultNodeClient.CloseAsync">
            <summary>
            与服务端断开连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.DefaultNodeClient.CallServiceAsync(System.Int32,System.Int32,System.Object[],System.Type,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            调用服务
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="paramList">Action参数列表</param>
            <param name="returnType">Action返回类型</param>
            <param name="timeout">Action调用超时时长（毫秒）</param>
            <param name="attachments">Action调用的附加数据</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.DefaultPassiveClosedStrategy">
            <summary>
            默认客户端被动关闭处理策略
            </summary>
        </member>
        <member name="M:XNode.Client.DefaultPassiveClosedStrategy.#ctor(XNode.Client.DefaultPassiveClosedStrategyConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
            <param name="loggerFactory">日志工厂</param>
        </member>
        <member name="M:XNode.Client.DefaultPassiveClosedStrategy.Handle(XNode.Communication.IClient)">
            <summary>
            客户端被动关闭处理
            </summary>
            <param name="client">客户端通信对象</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.DefaultPassiveClosedStrategyConfig">
            <summary>
            默认客户端被动关闭处理策略配置
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultPassiveClosedStrategyConfig.ReconnectCount">
            <summary>
            当发生网络错误时尝试重新连接的次数，-1表示无限，默认为-1
            </summary>
        </member>
        <member name="P:XNode.Client.DefaultPassiveClosedStrategyConfig.ReconnectInterval">
            <summary>
            每次尝试重新连接的时间间隔，单位：毫秒，默认为3000毫秒
            </summary>
        </member>
        <member name="T:XNode.Client.NodeClientException">
            <summary>
            NodeClient异常
            </summary>
        </member>
        <member name="M:XNode.Client.NodeClientException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:XNode.Client.ServiceCallException">
            <summary>
            服务调用异常
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallException.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallException.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallException.ExceptionId">
            <summary>
            异常编号
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceCallException.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="exceptionId">异常编号</param>
            <param name="message">异常信息</param>
        </member>
        <member name="T:XNode.Client.ServiceProxyExtensions">
            <summary>
            ServiceProxy扩展方法
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.Invoke(XNode.Client.IServiceProxy,System.Reflection.MethodInfo,System.Object[],System.Action{System.Reflection.MethodInfo,System.Object[]},System.Action{System.Reflection.MethodInfo,System.Object,System.Exception})">
            <summary>
            根据服务代理配置决定调用远程服务或本地服务
            </summary>
            <param name="serviceProxy"></param>
            <param name="actionProxyType">Action代理类型</param>
            <param name="paramList">服务调用参数列表</param>
            <param name="localServiceInvoker">本地服务调用委托，当服务代理配置为本地服务时会被调用，参数：MethodInfo=Action代理类型，object[]=服务调用参数列表</param>
            <param name="remoteServiceInvokeCallback">远程服务执行完成回调，当服务代理配置为远程服务时会被调用，参数：MethodInfo=Action代理类型，object=服务返回值</param>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.AddClients(XNode.Client.IServiceProxy,System.Collections.Generic.IList{XNode.Client.INodeClient})">
            <summary>
            添加多个Client
            </summary>
            <param name="serviceProxy"></param>
            <param name="nodeClientList">NodeClient列表</param>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.AddService``1(XNode.Client.IServiceProxy)">
            <summary>
            添加Service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProxy"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.AddServices(XNode.Client.IServiceProxy,System.Collections.Generic.IList{System.String})">
            <summary>
            根据类型名列表添加Service
            </summary>
            <param name="serviceProxy"></param>
            <param name="typeNameList"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.EnableAll(XNode.Client.IServiceProxy)">
            <summary>
            将代理中的所有服务设置为启用
            注意：在调用此方法后添加的服务将不会被此方法的设置所影响
            </summary>
            <param name="serviceProxy"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.DisableAll(XNode.Client.IServiceProxy)">
            <summary>
            将代理中的所有服务设置为禁用
            注意：在调用此方法后添加的服务将不会被此方法的设置所影响
            </summary>
            <param name="serviceProxy"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.Enable(XNode.Client.IServiceProxy,System.Int32,System.Nullable{System.Int32})">
            <summary>
            将代理中的指定服务设置为启用
            注意：在调用此方法后添加的服务将不会被此方法的设置所影响
            </summary>
            <param name="serviceProxy"></param>
            <param name="serviceId"></param>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.Disable(XNode.Client.IServiceProxy,System.Int32,System.Nullable{System.Int32})">
            <summary>
            将代理中的指定服务设置为禁用
            注意：在调用此方法后添加的服务将不会被此方法的设置所影响
            </summary>
            <param name="serviceProxy"></param>
            <param name="serviceId"></param>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyExtensions.IsServiceProxy(System.Type)">
            <summary>
            判断指定类型是否为服务代理
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.TypeExtensions">
            <summary>
            Type扩展方法类
            </summary>
        </member>
        <member name="M:XNode.Client.TypeExtensions.IsNodeServiceProxyType(System.Type)">
            <summary>
            判断指定类型是否能实例化为XNode服务代理
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.TypeExtensions.GetServiceProxyAttribute(System.Type)">
            <summary>
            获取XNode服务代理的Attribute
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.INodeClient">
            <summary>
            NodeClient接口
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClient.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClient.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClient.LocalHost">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClient.LocalPort">
            <summary>
            本地端口
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClient.Serializer">
            <summary>
            序列化器
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClient.ProtocolStackFactory">
            <summary>
            协议栈工厂
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClient.IsConnected">
            <summary>
            是否与服务端连接成功
            </summary>
        </member>
        <member name="M:XNode.Client.INodeClient.ConnectAsync">
            <summary>
            与服务端创建连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClient.CloseAsync">
            <summary>
            与服务端断开连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClient.CallServiceAsync(System.Int32,System.Int32,System.Object[],System.Type,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            调用服务
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="paramList">Action参数列表</param>
            <param name="retureType">Action返回类型</param>
            <param name="timeout">Action调用超时时长（毫秒）</param>
            <param name="attachments">Action调用的附加数据</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.INodeClientBuilder">
            <summary>
            XNode客户端构造器接口
            </summary>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.ConfigConnections(System.Collections.Generic.IList{XNode.Client.Configuration.ConnectionInfo})">
            <summary>
            配置客户端连接
            </summary>
            <param name="connectionInfos">客户端连接信息</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.ConfigSerializer(XNode.Serializer.ISerializer)">
            <summary>
            配置序列化器
            </summary>
            <param name="serializer">序列化器</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.ConfigProtocolStackFactory(XNode.ProtocolStack.IProtocolStackFactory)">
            <summary>
            配置协议工厂
            </summary>
            <param name="protocolStackFactory">协议工厂</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.ConfigLoginHandler(XNode.Security.ILoginHandler)">
            <summary>
            配置登录处理器
            </summary>
            <param name="loginHandler">登录处理器</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.ConfigPassiveClosedStrategy(XNode.Client.IPassiveClosedStrategy)">
            <summary>
            配置客户端被动关闭处理策略
            </summary>
            <param name="passiveClosedStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.ConfigNodeClientFactory(System.Func{XNode.Client.NodeClientParameters,XNode.Client.INodeClient})">
            <summary>
            配置客户端工厂
            </summary>
            <param name="nodeClientFactory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.ConfigCommunicationFactory(System.Func{XNode.Client.Configuration.ConnectionInfo,XNode.Communication.IClient})">
            <summary>
            配置底层客户端通信组件工厂
            </summary>
            <param name="communicationFactory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientBuilder.Build">
            <summary>
            构造XNode客户端实例集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.INodeClientContainer">
            <summary>
            NodeClient容器接口
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClientContainer.ProxyName">
            <summary>
            代理名称
            </summary>
        </member>
        <member name="P:XNode.Client.INodeClientContainer.Count">
            <summary>
            容器中包含的NodeClient数量
            </summary>
        </member>
        <member name="M:XNode.Client.INodeClientContainer.Add(XNode.Client.INodeClient)">
            <summary>
            向容器中添加NodeClient对象
            </summary>
            <param name="nodeClient"></param>
        </member>
        <member name="M:XNode.Client.INodeClientContainer.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            从容器中移除指定NodeClient对象
            </summary>
            <param name="host">客户端地址</param>
            <param name="port">客户端端口</param>
            <param name="isDisconnect">是否将移除的Client连接关闭</param>
        </member>
        <member name="M:XNode.Client.INodeClientContainer.Get(System.Int32,System.Int32,System.Object[],System.Type,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            获取可用的NodeClient对象
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="paramList">Action参数列表</param>
            <param name="returnType">Action返回类型</param>
            <param name="Attachments">服务调用附加数据</param>
        </member>
        <member name="M:XNode.Client.INodeClientContainer.GetAll">
            <summary>
            获取容器中所有NodeClient对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientContainer.ConnectAsync">
            <summary>
            为容器中所有NodeClient执行连接操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.INodeClientContainer.CloseAsync">
            <summary>
            关闭中容器中所有NodeClient连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.IPassiveClosedStrategy">
            <summary>
            客户端被动关闭处理策略接口
            </summary>
        </member>
        <member name="M:XNode.Client.IPassiveClosedStrategy.Handle(XNode.Communication.IClient)">
            <summary>
            客户端被动关闭处理
            </summary>
            <param name="client">客户端通信对象</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.IServiceCaller">
            <summary>
            以管线方式调用服务
            </summary>
        </member>
        <member name="P:XNode.Client.IServiceCaller.Next">
            <summary>
            下一个服务调用器
            </summary>
        </member>
        <member name="M:XNode.Client.IServiceCaller.CallAsync(XNode.Client.INodeClientContainer,XNode.Client.ServiceCallInfo)">
            <summary>
            服务调用
            </summary>
            <param name="nodeClientContainer">NodeClient容器</param>
            <param name="info">服务调用信息</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallInfo">
            <summary>
            服务调用信息
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.ProxyName">
            <summary>
            代理名称
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.ActionName">
            <summary>
            Action名称
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.ParamList">
            <summary>
            Action调用参数列表
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.ReturnType">
            <summary>
            Action调用返回类型
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.Timeout">
            <summary>
            Action调用超时时长（毫秒）
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallInfo.Attachments">
            <summary>
            Action调用附加数据
            </summary>
        </member>
        <member name="T:XNode.Client.IServiceProxy">
            <summary>
            服务代理接口
            </summary>
        </member>
        <member name="P:XNode.Client.IServiceProxy.ProxyName">
            <summary>
            代理名称
            </summary>
        </member>
        <member name="P:XNode.Client.IServiceProxy.ServiceTypes">
            <summary>
            获取当前代理关联的所有ServiceType
            </summary>
        </member>
        <member name="P:XNode.Client.IServiceProxy.ServiceProxyInfos">
            <summary>
            获取当前代理关联的所有服务代理信息
            </summary>
        </member>
        <member name="M:XNode.Client.IServiceProxy.GetServiceProxyInfo(System.Reflection.MethodInfo)">
            <summary>
            获取服务代理信息
            </summary>
            <param name="actionType">Action类型</param>
        </member>
        <member name="M:XNode.Client.IServiceProxy.AddService(System.Type)">
            <summary>
            添加Service
            </summary>
            <param name="serviceProxyType">Service类型</param>
        </member>
        <member name="M:XNode.Client.IServiceProxy.AddClient(XNode.Client.INodeClient)">
            <summary>
            添加Client
            </summary>
            <param name="nodeClient">nodeClient实例</param>
        </member>
        <member name="M:XNode.Client.IServiceProxy.RemoveClient(System.String,System.Int32,System.Boolean)">
            <summary>
            移除Client
            </summary>
            <param name="host">Client地址</param>
            <param name="port">Client端口</param>
            <param name="isDisconnect">是否将移除的Client连接关闭</param>
        </member>
        <member name="M:XNode.Client.IServiceProxy.CallRemoteServiceAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            调用远程服务
            </summary>
            <param name="actionType">Action类型</param>
            <param name="paramList">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.IServiceProxy.ConnectAsync">
            <summary>
            执行连接操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.IServiceProxy.CloseAsync">
            <summary>
            执行断开连接操作
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.IServiceProxyManager">
            <summary>
            服务代理管理器接口
            </summary>
        </member>
        <member name="M:XNode.Client.IServiceProxyManager.GetServiceProxy(System.String)">
            <summary>
            获取指定服务代理
            </summary>
            <param name="proxyName">代理名称</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.IServiceProxyManager.GetServiceProxy(System.Type)">
            <summary>
            根据服务类型获取指定服务代理
            </summary>
            <param name="serviceType">服务类型</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.IServiceProxyManager.Regist(XNode.Client.IServiceProxy)">
            <summary>
            注册服务代理
            </summary>
            <param name="serviceProxy">服务代理</param>
        </member>
        <member name="M:XNode.Client.IServiceProxyManager.ConnectAsync(System.String)">
            <summary>
            为指定的代理执行连接操作，如果proxyName为null则为所有已注册的代理执行连接操作
            </summary>
            <param name="proxyName">代理名称</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.IServiceProxyManager.CloseAsync(System.String)">
            <summary>
            为指定的代理执行断开连接操作，如果proxyName为null则为所有已注册的代理执行断开连接操作
            </summary>
            <param name="proxyName">代理名称</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.NodeClientBuilder">
            <summary>
            默认XNode客户端构造器
            </summary>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.ConfigConnections(System.Collections.Generic.IList{XNode.Client.Configuration.ConnectionInfo})">
            <summary>
            配置客户端连接
            </summary>
            <param name="connectionInfos">客户端连接信息</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.ConfigSerializer(XNode.Serializer.ISerializer)">
            <summary>
            配置序列化器
            </summary>
            <param name="serializer">序列化器</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.ConfigProtocolStackFactory(XNode.ProtocolStack.IProtocolStackFactory)">
            <summary>
            配置协议工厂
            </summary>
            <param name="protocolStackFactory">协议工厂</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.ConfigLoginHandler(XNode.Security.ILoginHandler)">
            <summary>
            配置登录处理器
            </summary>
            <param name="loginHandler">登录处理器</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.ConfigPassiveClosedStrategy(XNode.Client.IPassiveClosedStrategy)">
            <summary>
            配置客户端被动关闭处理策略
            </summary>
            <param name="passiveClosedStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.ConfigNodeClientFactory(System.Func{XNode.Client.NodeClientParameters,XNode.Client.INodeClient})">
            <summary>
            配置客户端工厂
            </summary>
            <param name="nodeClientFactory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.ConfigCommunicationFactory(System.Func{XNode.Client.Configuration.ConnectionInfo,XNode.Communication.IClient})">
            <summary>
            配置底层客户端通信组件工厂
            </summary>
            <param name="communicationFactory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientBuilder.Build">
            <summary>
            构造XNode客户端实例集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.NodeClientContainerBase">
            <summary>
            NodeClient容器基类
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientContainerBase.NodeClientList">
            <summary>
            容器中包含的NodeClient列表
            </summary>
        </member>
        <member name="M:XNode.Client.NodeClientContainerBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientContainerBase.ProxyName">
            <summary>
            代理名称
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientContainerBase.Count">
            <summary>
            容器中包含的NodeClient数量
            </summary>
        </member>
        <member name="M:XNode.Client.NodeClientContainerBase.Add(XNode.Client.INodeClient)">
            <summary>
            向容器中添加NodeClient对象
            </summary>
            <param name="nodeClient"></param>
        </member>
        <member name="M:XNode.Client.NodeClientContainerBase.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            从容器中移除指定NodeClient对象
            </summary>
            <param name="host">客户端地址</param>
            <param name="port">客户端端口</param>
            <param name="isDisconnect">是否将移除的Client连接关闭</param>
        </member>
        <member name="M:XNode.Client.NodeClientContainerBase.CloseAsync">
            <summary>
            关闭中容器中所有NodeClient连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientContainerBase.ConnectAsync">
            <summary>
            为容器中所有NodeClient执行连接操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.NodeClientContainerBase.Get(System.Int32,System.Int32,System.Object[],System.Type,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            获取NodeClient对象
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="paramList">Action参数列表</param>
            <param name="returnType">Action返回类型</param>
            <param name="Attachments">服务调用附加数据</param>
        </member>
        <member name="M:XNode.Client.NodeClientContainerBase.GetAll">
            <summary>
            获取容器中所有NodeClient对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.NodeClientContainers.DefaultNodeClientContainer">
            <summary>
            默认NodeClient容器
            </summary>
        </member>
        <member name="M:XNode.Client.NodeClientContainers.DefaultNodeClientContainer.Get(System.Int32,System.Int32,System.Object[],System.Type,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            轮循获取可用的NodeClient对象
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="paramList">Action参数列表</param>
            <param name="returnType">Action返回类型</param>
            <param name="Attachments">服务调用附加数据</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.NodeClientParameters">
            <summary>
            XNode客户端参数类
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.LocalHost">
            <summary>
            本地绑定地址
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.LocalPort">
            <summary>
            本地绑定IP
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.Serializer">
            <summary>
            序列化器实例
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.ProtocolStackFactory">
            <summary>
            协议栈工厂实例
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.LoginHandler">
            <summary>
            登录处理器
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.Communication">
            <summary>
            底层客户端通信组件
            </summary>
        </member>
        <member name="P:XNode.Client.NodeClientParameters.PassiveClosedStrategy">
            <summary>
            客户端被动关闭处理策略
            </summary>
        </member>
        <member name="M:XNode.Client.NodeClientParameters.Create(System.Collections.Generic.IList{XNode.Client.Configuration.ConnectionInfo},XNode.Serializer.ISerializer,System.Func{XNode.Client.Configuration.ConnectionInfo,XNode.Communication.IClient},XNode.Security.ILoginHandler,XNode.ProtocolStack.IProtocolStackFactory,XNode.Client.IPassiveClosedStrategy)">
            <summary>
            创建NodeClientParameters实例
            </summary>
            <param name="connectionInfoList">连接信息</param>
            <param name="serializer">序列化器实例</param>
            <param name="communicationFactory">底层客户端通信组件工厂</param>
            <param name="loginHandler">登录处理器</param>
            <param name="protocolStackFactory">协议栈工厂实例</param>
            <param name="passiveClosedStrategy">客户端被动关闭处理策略</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallerBase">
            <summary>
            服务调用器基类
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallerBase.Next">
            <summary>
            下一个服务调用器
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceCallerBase.CallAsync(XNode.Client.INodeClientContainer,XNode.Client.ServiceCallInfo)">
            <summary>
            服务调用
            </summary>
            <param name="nodeClientContainer">NodeClient容器</param>
            <param name="info">服务调用信息</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallerBuilder">
            <summary>
            ServiceCaller构造器
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceCallerBuilder.Append(XNode.Client.IServiceCaller)">
            <summary>
            添加ServiceCaller
            </summary>
            <param name="serviceCaller">ServiceCaller实例</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceCallerBuilder.Build">
            <summary>
            构造ServiceCaller
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallers.DefaultServiceCaller">
            <summary>
            默认服务调用器
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceCallers.DefaultServiceCaller.CallAsync(XNode.Client.INodeClientContainer,XNode.Client.ServiceCallInfo)">
            <summary>
            调用服务
            </summary>
            <param name="nodeClientContainer">NodeClient容器</param>
            <param name="info">服务调用信息</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallers.DefaultServiceCallerBuilderExtension">
            <summary>
            默认ServiceCaller构造器扩展方法
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceCallers.DefaultServiceCallerBuilderExtension.UseDefault(XNode.Client.ServiceCallerBuilder)">
            <summary>
            使用DefaultServiceCaller
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallers.RetryServiceCaller">
            <summary>
            当调用服务出现网络错误时进行重试
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceCallers.RetryServiceCaller.CallAsync(XNode.Client.INodeClientContainer,XNode.Client.ServiceCallInfo)">
            <summary>
            调用服务
            </summary>
            <param name="nodeClientContainer">NodeClient容器</param>
            <param name="info">服务调用信息</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallers.RetryServiceCallerBuilderExtensions">
            <summary>
            RetryServiceCaller构造器扩展方法
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceCallers.RetryServiceCallerBuilderExtensions.UseRetry(XNode.Client.ServiceCallerBuilder)">
            <summary>
            使用RetryServiceCaller
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Client.ServiceCallResult">
            <summary>
            服务调用结果
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallResult.ReturnVal">
            <summary>
            服务调用返回值
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceCallResult.Attachments">
            <summary>
            服务调用返回的附加数据
            </summary>
        </member>
        <member name="T:XNode.Client.ServiceProxy">
            <summary>
            服务代理
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxy.ProxyName">
            <summary>
            代理名称
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxy.ServiceTypes">
            <summary>
            获取当前代理关联的所有ServiceType
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxy.ServiceProxyInfos">
            <summary>
            获取当前代理关联的所有服务代理信息
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceProxy.#ctor(System.String,System.Collections.Generic.IList{XNode.Client.Configuration.ServiceInfo},XNode.Client.IServiceCaller,XNode.Client.INodeClientContainer)">
            <summary>
            构造函数
            </summary>
            <param name="proxyName">服务名称</param>
            <param name="serviceInfos">服务配置信息</param>
            <param name="serviceCaller">服务调用器对象，默认为DefaultServiceCaller</param>
            <param name="nodeClientContainer">NodeClient容器，默认为DefaultNodeClientContainer</param>
        </member>
        <member name="M:XNode.Client.ServiceProxy.AddService(System.Type)">
            <summary>
            添加Service
            </summary>
            <param name="serviceProxyType">Service类型</param>
        </member>
        <member name="M:XNode.Client.ServiceProxy.GetServiceProxyInfo(System.Reflection.MethodInfo)">
            <summary>
            获取服务代理信息
            </summary>
            <param name="actionType">Action类型</param>
        </member>
        <member name="M:XNode.Client.ServiceProxy.AddClient(XNode.Client.INodeClient)">
            <summary>
            添加Client
            </summary>
            <param name="nodeClient">nodeClient实例</param>
        </member>
        <member name="M:XNode.Client.ServiceProxy.RemoveClient(System.String,System.Int32,System.Boolean)">
            <summary>
            移除Client
            </summary>
            <param name="host">Client地址</param>
            <param name="port">Client端口</param>
            <param name="isDisconnect">是否将移除的Client连接关闭</param>
        </member>
        <member name="M:XNode.Client.ServiceProxy.CallRemoteServiceAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            调用远程服务
            </summary>
            <param name="actionType">Action类型</param>
            <param name="paramList">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxy.ConnectAsync">
            <summary>
            执行连接操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxy.CloseAsync">
            <summary>
            执行断开连接操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxy.AddAction(XNode.Client.ServiceProxyInfo)">
            <summary>
            添加Action
            </summary>
            <param name="serviceProxyInfo">服务代理信息</param>
        </member>
        <member name="T:XNode.Client.ServiceProxyInfo">
            <summary>
            服务代理信息
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ProxyName">
            <summary>
            代理名称
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ActionName">
            <summary>
            Action名称
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.Timeout">
            <summary>
            超时时长（毫秒）
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ServiceProxyType">
            <summary>
            服务代理类型
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ActionProxyType">
            <summary>
            Action代理类型
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.ReturnType">
            <summary>
            Action执行返回类型
            </summary>
        </member>
        <member name="P:XNode.Client.ServiceProxyInfo.Enabled">
            <summary>
            Action是否启用
            </summary>
        </member>
        <member name="T:XNode.Client.ServiceProxyManager">
            <summary>
            服务代理管理器
            </summary>
        </member>
        <member name="M:XNode.Client.ServiceProxyManager.GetServiceProxy(System.String)">
            <summary>
            获取指定服务代理
            </summary>
            <param name="proxyName">代理名称</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyManager.GetServiceProxy(System.Type)">
            <summary>
            根据服务类型获取指定服务代理
            </summary>
            <param name="serviceType">服务类型</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyManager.Regist(XNode.Client.IServiceProxy)">
            <summary>
            注册服务代理
            </summary>
            <param name="serviceProxy">服务代理</param>
        </member>
        <member name="M:XNode.Client.ServiceProxyManager.ConnectAsync(System.String)">
            <summary>
            为指定的代理执行连接操作，如果proxyName为null则为所有已注册的代理执行连接操作
            </summary>
            <param name="proxyName">代理名称</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Client.ServiceProxyManager.CloseAsync(System.String)">
            <summary>
            为指定的代理执行断开连接操作，如果proxyName为null则为所有已注册的代理执行断开连接操作
            </summary>
            <param name="proxyName">代理名称</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.LoginAuthException">
            <summary>
            登录验证异常
            </summary>
        </member>
        <member name="M:XNode.Communication.LoginAuthException.#ctor(System.Byte,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="loginResult">登录验证结果</param>
            <param name="message">异常信息</param>
        </member>
        <member name="P:XNode.Communication.LoginAuthException.LoginResult">
            <summary>
            登录验证结果
            </summary>
        </member>
        <member name="T:XNode.Communication.NetworkException">
            <summary>
            网络异常
            </summary>
        </member>
        <member name="P:XNode.Communication.NetworkException.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:XNode.Communication.NetworkException.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="M:XNode.Communication.NetworkException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="host">host</param>
            <param name="port">port</param>
            <param name="message">异常信息</param>
        </member>
        <member name="T:XNode.Communication.SubmitLoginRequestDelegate">
            <summary>
            提交登录请求委托
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.RecieveLoginResponseDelegate">
            <summary>
            接收登录响应委托
            </summary>
            <returns>登录验证状态码（非0表示验证失败，1-30为XNode保留状态码）</returns>
        </member>
        <member name="T:XNode.Communication.PassiveClosedDelegate">
            <summary>
            被动关闭委托
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.IClient">
            <summary>
            客服端通信接口
            </summary>
        </member>
        <member name="E:XNode.Communication.IClient.OnSubmitLoginRequest">
            <summary>
            提交登录请求事件
            </summary>
        </member>
        <member name="E:XNode.Communication.IClient.OnRecieveLoginResponse">
            <summary>
            接收登录响应事件
            </summary>
        </member>
        <member name="E:XNode.Communication.IClient.OnPassiveClosed">
            <summary>
            被动关闭事件
            </summary>
        </member>
        <member name="P:XNode.Communication.IClient.Status">
            <summary>
            客户端状态
            </summary>
        </member>
        <member name="P:XNode.Communication.IClient.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Communication.IClient.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="P:XNode.Communication.IClient.LocalHost">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="P:XNode.Communication.IClient.LocalPort">
            <summary>
            本地端口
            </summary>
        </member>
        <member name="M:XNode.Communication.IClient.ConnectAsync">
            <summary>
            向服务端发起连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Communication.IClient.SendOneWayAsync(System.Byte[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            单向发送消息到服务器
            </summary>
            <param name="msg">消息数据</param>
            <param name="timeout">超时时长（毫秒）</param>
            <param name="attachments">消息附加数据</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Communication.IClient.SendAsync(System.Byte[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            发送消息到服务器
            </summary>
            <param name="msg">消息数据</param>
            <param name="timeout">超时时长（毫秒）</param>
            <param name="attachments">消息附加数据</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Communication.IClient.CloseAsync">
            <summary>
            关闭与服务端的连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.ClientStatus">
            <summary>
            客户端状态
            </summary>
        </member>
        <member name="F:XNode.Communication.ClientStatus.Closed">
            <summary>
            主动关闭
            </summary>
        </member>
        <member name="F:XNode.Communication.ClientStatus.Connecting">
            <summary>
            连接中
            </summary>
        </member>
        <member name="F:XNode.Communication.ClientStatus.Connected">
            <summary>
            已连接
            </summary>
        </member>
        <member name="F:XNode.Communication.ClientStatus.PassiveClosed">
            <summary>
            被动关闭
            </summary>
        </member>
        <member name="T:XNode.Communication.RecieveLoginRequestDelegate">
            <summary>
            接收登录请求委托
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.RecieveServiceRequestDelegate">
            <summary>
            接收服务请求委托
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.IServer">
            <summary>
            服务端通信接口
            </summary>
        </member>
        <member name="P:XNode.Communication.IServer.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Communication.IServer.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="E:XNode.Communication.IServer.OnRecieveLoginRequest">
            <summary>
            接收登录请求事件
            </summary>
        </member>
        <member name="E:XNode.Communication.IServer.OnRecieveServiceRequest">
            <summary>
            接收服务请求事件
            </summary>
        </member>
        <member name="M:XNode.Communication.IServer.StartAsync">
            <summary>
            启动服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Communication.IServer.CloseAsync">
            <summary>
            关闭服务器
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.LoginAuthInfo">
            <summary>
            登录验证信息
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginAuthInfo.Body">
            <summary>
            客户端提交的主体数据
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginAuthInfo.Attachments">
            <summary>
            客户端提交的附加数据
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginAuthInfo.RemoteAddress">
            <summary>
            客户端地址
            </summary>
        </member>
        <member name="T:XNode.Communication.LoginRequestData">
            <summary>
            登录请求数据
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginRequestData.Body">
            <summary>
            客户端提交的主体数据
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginRequestData.Attachments">
            <summary>
            客户端提交的附加数据
            </summary>
        </member>
        <member name="T:XNode.Communication.LoginResponseData">
            <summary>
            登录响应数据
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginResponseData.AuthIdentity">
            <summary>
            登录验证的身份标识
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginResponseData.AuthResult">
            <summary>
            登录验证是否成功
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginResponseData.AuthStatusCode">
            <summary>
            登录验证状态码（非0表示验证失败，1-30为XNode保留状态码）
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginResponseData.AuthFailedMessage">
            <summary>
            登录验证失败错误信息
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginResponseData.Attachments">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="T:XNode.Communication.AuthStatusCodes">
            <summary>
            XNode保留登录验证状态码枚举
            </summary>
        </member>
        <member name="F:XNode.Communication.AuthStatusCodes.LoginRecieveHandlerIsNull">
            <summary>
            未配置登录验证Handler
            </summary>
        </member>
        <member name="F:XNode.Communication.AuthStatusCodes.LoginResponseDataIsNull">
            <summary>
            调用登录验证Handler返回的LoginResponseData对象为Null
            </summary>
        </member>
        <member name="F:XNode.Communication.AuthStatusCodes.NoLogin">
            <summary>
            未登录
            </summary>
        </member>
        <member name="F:XNode.Communication.AuthStatusCodes.WaitLoginResponseTimeout">
            <summary>
            等待登录响应超时
            </summary>
        </member>
        <member name="F:XNode.Communication.AuthStatusCodes.ParseLoginResponseDataError">
            <summary>
            解析登录响应数据时发生错误
            </summary>
        </member>
        <member name="T:XNode.Communication.LoginState">
            <summary>
            登录状态
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginState.IsLoginSuccess">
            <summary>
            是否登录成功
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginState.Identity">
            <summary>
            身份标识
            </summary>
        </member>
        <member name="P:XNode.Communication.LoginState.RemoteAddress">
            <summary>
            客户端地址
            </summary>
        </member>
        <member name="T:XNode.Communication.ProtocolStack.Message">
            <summary>
            消息定义
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.Message.Header">
            <summary>
            消息头
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.Message.Body">
            <summary>
            消息体
            </summary>
        </member>
        <member name="M:XNode.Communication.ProtocolStack.Message.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.ProtocolStack.MessageHeader">
            <summary>
            消息头
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.MessageHeader.CrcCode">
            <summary>
            校验码（32位）
            第1-2字节为固定值abef表示消息为XNode消息
            第3字节表示主版本号（0-255）
            第4字节表示次版本号（0-255）
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.MessageHeader.Length">
            <summary>
            消息长度（32位）
            包括消息头与消息体
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.MessageHeader.RequestId">
            <summary>
            请求ID（64位）
            由请求ID生成器生成
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.MessageHeader.Type">
            <summary>
            消息类型（8位）
            0：业务请求消息
            1：业务响应消息
            2：业务ONE WAY消息（既是请求又是响应消息）
            3：握手请求消息
            4：握手应答消息
            5：心跳请求消息
            6：心跳应答消息
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.MessageHeader.Priority">
            <summary>
            消息优先级（8位）
            0-255
            </summary>
        </member>
        <member name="P:XNode.Communication.ProtocolStack.MessageHeader.Attachments">
            <summary>
            可选字段（变长）
            用于扩展消息头
            如果Attachment长度为0，表示没有可选附件，则将长度编码设为0，ByteBuffer.WriteInt(0)；如果大于0，说明有附件需要编码，规则如下：
            首先对附件的个数进行编码，ByteBuffer.WriteInt(Attachment.Count)
            然后对Key进行编码（以UTF-8转为byte数组后，ByteBuffer.WriteInt(数组长度)与ByteBuffer.WriteBytes(数组)），再将Value长度与本身写入与ByteBuffer
            </summary>
        </member>
        <member name="M:XNode.Communication.ProtocolStack.MessageHeader.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Communication.ProtocolStack.MessageType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:XNode.Communication.ProtocolStack.MessageType.SERVICE_REQ">
            <summary>
            0：业务请求消息
            </summary>
        </member>
        <member name="F:XNode.Communication.ProtocolStack.MessageType.SERVICE_RESP">
            <summary>
            1：业务响应消息
            </summary>
        </member>
        <member name="F:XNode.Communication.ProtocolStack.MessageType.ONE_WAY">
            <summary>
            2：业务ONE WAY消息（既是请求又是响应消息）
            </summary>
        </member>
        <member name="F:XNode.Communication.ProtocolStack.MessageType.LOGIN_REQ">
            <summary>
            3：握手请求消息
            </summary>
        </member>
        <member name="F:XNode.Communication.ProtocolStack.MessageType.LOGIN_RESP">
            <summary>
            4：握手应答消息
            </summary>
        </member>
        <member name="F:XNode.Communication.ProtocolStack.MessageType.HEARTBEAT_REQ">
            <summary>
            5：心跳请求消息
            </summary>
        </member>
        <member name="F:XNode.Communication.ProtocolStack.MessageType.HEARTBEAT_RESP">
            <summary>
            6：心跳应答消息
            </summary>
        </member>
        <member name="T:XNode.Communication.RequestManager">
            <summary>
            请求管理器
            </summary>
        </member>
        <member name="M:XNode.Communication.RequestManager.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="loggerFactory">日志工厂</param>
        </member>
        <member name="M:XNode.Communication.RequestManager.GetNewRequestId(System.Int64@)">
            <summary>
            生成新的RequestId，RequestId从long.MinValue到long.MaxValue循环使用
            </summary>
            <param name="currentId">最新可使用的RequestId</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Communication.RequestManager.CreateRequest(System.Int32)">
            <summary>
            创建请求信息对象
            </summary>
            <param name="timeout">请求超时时长（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Communication.RequestManager.CompleteRequest(System.Int64,XNode.Communication.ProtocolStack.Message)">
            <summary>
            请求完成
            </summary>
            <param name="requestId">RequestId</param>
            <param name="result">承载请求响应的消息对象</param>
        </member>
        <member name="T:XNode.Communication.RequestInfo">
            <summary>
            请求信息对象
            </summary>
        </member>
        <member name="P:XNode.Communication.RequestInfo.Id">
            <summary>
            RequestId
            </summary>
        </member>
        <member name="P:XNode.Communication.RequestInfo.TaskCompletionSource">
            <summary>
            TaskCompletionSource
            </summary>
        </member>
        <member name="P:XNode.Communication.RequestInfo.CancellationTokenSource">
            <summary>
            CancellationTokenSource
            </summary>
        </member>
        <member name="P:XNode.Communication.RequestInfo.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="T:XNode.Communication.RequestTimeoutExcption">
            <summary>
            请求超时异常
            </summary>
        </member>
        <member name="M:XNode.Communication.RequestTimeoutExcption.#ctor(System.String,XNode.Communication.RequestInfo)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
            <param name="request">请求信息对象</param>
        </member>
        <member name="P:XNode.Communication.RequestTimeoutExcption.Request">
            <summary>
            请求信息对象
            </summary>
        </member>
        <member name="T:XNode.Communication.RequestResult">
            <summary>
            请求响应结果
            </summary>
        </member>
        <member name="P:XNode.Communication.RequestResult.Data">
            <summary>
            响应数据
            </summary>
        </member>
        <member name="P:XNode.Communication.RequestResult.Attachments">
            <summary>
            响应附加数据
            </summary>
        </member>
        <member name="T:XNode.Communication.ResponseData">
            <summary>
            响应数据
            </summary>
        </member>
        <member name="P:XNode.Communication.ResponseData.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XNode.Communication.ResponseData.Attachments">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="T:XNode.ExceptionMap">
            <summary>
            异常工具类
            </summary>
        </member>
        <member name="F:XNode.ExceptionMap.ServiceExceptions">
            <summary>
            服务异常
            </summary>
        </member>
        <member name="F:XNode.ExceptionMap.SystemExceptions">
            <summary>
            系统异常
            </summary>
        </member>
        <member name="T:XNode.ServiceExceptionKeys">
            <summary>
            服务异常Key常量
            </summary>
        </member>
        <member name="F:XNode.ServiceExceptionKeys.SERVER_CONFIG_ERROR">
            <summary>
            服务器配置错误
            </summary>
        </member>
        <member name="F:XNode.ServiceExceptionKeys.SERVICE_NOT_EXIST_ERROR">
            <summary>
            服务不存在错误
            </summary>
        </member>
        <member name="F:XNode.ServiceExceptionKeys.SERVICE_DISABLED_ERROR">
            <summary>
            服务禁用错误
            </summary>
        </member>
        <member name="F:XNode.ServiceExceptionKeys.SERVICE_INVOKE_ERROR">
            <summary>
            服务调用错误
            </summary>
        </member>
        <member name="F:XNode.ServiceExceptionKeys.SERVICE_NO_AUTHORIZE">
            <summary>
            服务未授权错误
            </summary>
        </member>
        <member name="F:XNode.ServiceExceptionKeys.SERVICE_DATE_LIMIT">
            <summary>
            服务日期限制错误
            </summary>
        </member>
        <member name="F:XNode.ServiceExceptionKeys.SERVICE_TIME_LIMIT">
            <summary>
            服务时间限制错误
            </summary>
        </member>
        <member name="T:XNode.SystemExceptionKeys">
            <summary>
            系统异常Key常量
            </summary>
        </member>
        <member name="F:XNode.SystemExceptionKeys.SYSTEM_ERROR">
            <summary>
            系统错误
            </summary>
        </member>
        <member name="T:XNode.GlobalSettings">
            <summary>
            全局设置
            </summary>
        </member>
        <member name="M:XNode.GlobalSettings.Apply(XNode.GlobalConfig)">
            <summary>
            应用设置
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:XNode.GlobalConfig">
            <summary>
            全局配置
            </summary>
        </member>
        <member name="P:XNode.GlobalConfig.MinWorkThreads">
            <summary>
            最小工作线程数
            </summary>
        </member>
        <member name="P:XNode.GlobalConfig.MaxWorkThreads">
            <summary>
            最大工作线程数
            </summary>
        </member>
        <member name="P:XNode.GlobalConfig.MinCompletionPortThreads">
            <summary>
            最小I/O线程数
            </summary>
        </member>
        <member name="P:XNode.GlobalConfig.MaxCompletionPortThreads">
            <summary>
            最大I/O线程数
            </summary>
        </member>
        <member name="T:XNode.ConfigurationExtensions">
            <summary>
            配置扩展方法
            </summary>
        </member>
        <member name="M:XNode.ConfigurationExtensions.GetGlobalConfig(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            获取全局配置
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Logging.LoggerManager">
            <summary>
            日志管理器
            </summary>
        </member>
        <member name="P:XNode.Logging.LoggerManager.ClientLoggerFactory">
            <summary>
            客户端日志工厂
            </summary>
        </member>
        <member name="P:XNode.Logging.LoggerManager.ServerLoggerFactory">
            <summary>
            服务器日志工厂
            </summary>
        </member>
        <member name="T:XNode.Security.CryptographyUtils">
            <summary>
            加解密工具类
            </summary>
        </member>
        <member name="M:XNode.Security.CryptographyUtils.MD5Encrypt(System.String)">
            <summary>
            MD5 加密
            </summary>
            <param name="original">The input.</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Security.CryptographyUtils.SHA1Encrypt(System.String)">
            <summary>
            SHA1 加密
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Security.CryptographyUtils.SHA256Encrypt(System.String)">
            <summary>
            SHA256 加密
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Security.CryptographyUtils.GetDefaultSignature(System.String,System.String,System.String,System.String)">
            <summary>
            默认签名算法
            </summary>
            <param name="accountName">账号名称</param>
            <param name="noncestr">随机字符串</param>
            <param name="timestamp">时间戳</param>
            <param name="accountKey">账号密钥</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Security.CryptographyUtils.getNoncestr(System.Boolean,System.Int32)">
            <summary>
            生成随机字符串
            </summary>
            <param name="hasComplex">是否含有复杂字符</param>
            <param name="length">生成的字符串长度</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Security.DefaultLoginAuthConstants">
            <summary>
            默认登录验证所使用的常量
            </summary>
        </member>
        <member name="F:XNode.Security.DefaultLoginAuthConstants.TimestampKey">
            <summary>
            时间戳字典Key
            </summary>
        </member>
        <member name="F:XNode.Security.DefaultLoginAuthConstants.NoncestrKey">
            <summary>
            随机字符串字典Key
            </summary>
        </member>
        <member name="F:XNode.Security.DefaultLoginAuthConstants.SignatureKey">
            <summary>
            签名字典Key
            </summary>
        </member>
        <member name="F:XNode.Security.DefaultLoginAuthConstants.AccountNameKey">
            <summary>
            账号名称Key
            </summary>
        </member>
        <member name="T:XNode.Security.DefaultLoginHandler">
            <summary>
            默认登录处理器
            </summary>
        </member>
        <member name="M:XNode.Security.DefaultLoginHandler.#ctor(XNode.Security.DefaultLoginHandlerConfig,XNode.Serializer.ISerializer,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置信息</param>
            <param name="serializer">序列化器</param>
            <param name="loggerFactory">日志工厂</param>
        </member>
        <member name="M:XNode.Security.DefaultLoginHandler.GetLoginInfo">
            <summary>
            获取登录信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Security.DefaultLoginHandler.LoginResponseHandle(XNode.Security.LoginResponseInfo)">
            <summary>
            登录验证响应处理
            </summary>
            <param name="loginResponseInfo">登录验证响应信息</param>
            <returns>登录验证状态码（非0表示验证失败，1-30为XNode保留状态码）</returns>
        </member>
        <member name="T:XNode.Security.DefaultLoginHandlerConfig">
            <summary>
            默认登录处理器配置
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultLoginHandlerConfig.AccountName">
            <summary>
            账号名称
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultLoginHandlerConfig.AccountKey">
            <summary>
            账号密钥
            </summary>
        </member>
        <member name="T:XNode.Security.DefaultLoginValidator">
            <summary>
            默认登录验证器
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultLoginValidator.Serializer">
            <summary>
            序列化器
            </summary>
        </member>
        <member name="M:XNode.Security.DefaultLoginValidator.#ctor(XNode.Security.DefaultLoginValidatorConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置信息</param>
            <param name="loggerFactory">日志工厂</param>
        </member>
        <member name="M:XNode.Security.DefaultLoginValidator.LoadConfig(XNode.Security.DefaultLoginValidatorConfig)">
            <summary>
            加载日志信息
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:XNode.Security.DefaultLoginValidator.Validate(XNode.Security.LoginRequestInfo)">
            <summary>
            登录验证
            </summary>
            <param name="loginInfo">登录信息</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Security.DefaultLoginValidatorConfig">
            <summary>
            默认登录验证器配置
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultLoginValidatorConfig.Accounts">
            <summary>
            账号列表
            </summary>
        </member>
        <member name="T:XNode.Security.DefaultLoginValidatorAccountInfo">
            <summary>
            默认登录验证器账号信息
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultLoginValidatorAccountInfo.AccountName">
            <summary>
            账号名称
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultLoginValidatorAccountInfo.AccountKey">
            <summary>
            账号密钥
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultLoginValidatorAccountInfo.IPWhiteList">
            <summary>
            IP白名单
            </summary>
        </member>
        <member name="T:XNode.Security.DefaultServiceAuthorizer">
            <summary>
            默认服务授权验证
            </summary>
        </member>
        <member name="M:XNode.Security.DefaultServiceAuthorizer.#ctor(System.Collections.Generic.IList{XNode.Security.DefaultServiceAuthorizeConfig},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="configs">授权配置</param>
            <param name="loggerFactory">日志工厂</param>
        </member>
        <member name="M:XNode.Security.DefaultServiceAuthorizer.Validate(XNode.Server.ServiceContext,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            授权验证
            </summary>
            <param name="context">服务上下文</param>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="attachments">附加数据</param>
        </member>
        <member name="M:XNode.Security.DefaultServiceAuthorizer.LoadConfig(System.Collections.Generic.IList{XNode.Security.DefaultServiceAuthorizeConfig})">
            <summary>
            加载服务验证配置
            </summary>
            <param name="configs">配置列表</param>
        </member>
        <member name="M:XNode.Security.DefaultServiceAuthorizer.ValidateDateLimit(XNode.Security.DefaultServiceAuthorizeInfo)">
            <summary>
            验证日期限制
            </summary>
            <param name="authorizeInfo">验证配置</param>
        </member>
        <member name="M:XNode.Security.DefaultServiceAuthorizer.ValidateTimeLimit(XNode.Security.DefaultServiceAuthorizeInfo)">
            <summary>
            验证时间限制
            </summary>
            <param name="authorizeInfo">验证配置</param>
        </member>
        <member name="M:XNode.Security.DefaultServiceAuthorizer.LogDebug(System.String)">
            <summary>
            记录Debug日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:XNode.Security.DefaultServiceAuthorizer.LogInformation(System.String)">
            <summary>
            记录Info日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:XNode.Security.DefaultServiceAuthorizeConfig">
            <summary>
            默认服务授权验证配置
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeConfig.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeConfig.Actions">
            <summary>
            Action列表
            </summary>
        </member>
        <member name="T:XNode.Security.DefaultServiceAuthorizeAction">
            <summary>
            默认服务授权验证Action配置
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeAction.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeAction.Authorizes">
            <summary>
            授权详细列表
            </summary>
        </member>
        <member name="T:XNode.Security.DefaultServiceAuthorizeInfo">
            <summary>
            授权详细信息
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeInfo.Account">
            <summary>
            账号名称
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeInfo.DateLimit">
            <summary>
            日期限制
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeInfo.DateLimitBegin">
            <summary>
            日期限制开始
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeInfo.DateLimitEnd">
            <summary>
            日期限制结束
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeInfo.TimeLimit">
            <summary>
            日期限制
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeInfo.TimeLimitBegin">
            <summary>
            日期限制开始
            </summary>
        </member>
        <member name="P:XNode.Security.DefaultServiceAuthorizeInfo.TimeLimitEnd">
            <summary>
            日期限制结束
            </summary>
        </member>
        <member name="T:XNode.Security.ILoginHandler">
            <summary>
            登录处理器
            </summary>
        </member>
        <member name="M:XNode.Security.ILoginHandler.GetLoginInfo">
            <summary>
            获取登录信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Security.ILoginHandler.LoginResponseHandle(XNode.Security.LoginResponseInfo)">
            <summary>
            登录验证响应处理
            </summary>
            <param name="loginResponseInfo">登录验证响应信息</param>
            <returns>登录验证状态码（非0表示验证失败，1-30为XNode保留状态码）</returns>
        </member>
        <member name="T:XNode.Security.ILoginValidator">
            <summary>
            登录验证接口
            </summary>
        </member>
        <member name="P:XNode.Security.ILoginValidator.Serializer">
            <summary>
            序列化器
            </summary>
        </member>
        <member name="M:XNode.Security.ILoginValidator.Validate(XNode.Security.LoginRequestInfo)">
            <summary>
            登录验证
            </summary>
            <param name="loginInfo">登录信息</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Security.IServiceAuthorizer">
            <summary>
            服务授权验证接口
            </summary>
        </member>
        <member name="M:XNode.Security.IServiceAuthorizer.Validate(XNode.Server.ServiceContext,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            授权验证
            </summary>
            <param name="context">服务上下文</param>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <param name="attachments">附加数据</param>
        </member>
        <member name="T:XNode.Security.LoginAuthResult">
            <summary>
            登录验证结果
            </summary>
        </member>
        <member name="P:XNode.Security.LoginAuthResult.AuthIdentity">
            <summary>
            登录验证的身份标识
            </summary>
        </member>
        <member name="P:XNode.Security.LoginAuthResult.AuthResult">
            <summary>
            登录验证是否成功
            </summary>
        </member>
        <member name="P:XNode.Security.LoginAuthResult.AuthStatusCode">
            <summary>
            登录验证状态码（非0表示验证失败，1-30为XNode保留状态码）
            </summary>
        </member>
        <member name="P:XNode.Security.LoginAuthResult.AuthFailedMessage">
            <summary>
            登录验证失败错误信息
            </summary>
        </member>
        <member name="P:XNode.Security.LoginAuthResult.Attachments">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="T:XNode.Security.LoginInfo">
            <summary>
            登录信息
            </summary>
        </member>
        <member name="P:XNode.Security.LoginInfo.Body">
            <summary>
            客户端提交的主体数据
            </summary>
        </member>
        <member name="P:XNode.Security.LoginInfo.Attachments">
            <summary>
            客户端提交的附加数据
            </summary>
        </member>
        <member name="T:XNode.Security.LoginRequestInfo">
            <summary>
            登录请求信息
            </summary>
        </member>
        <member name="P:XNode.Security.LoginRequestInfo.Body">
            <summary>
            客户端提交的主体数据
            </summary>
        </member>
        <member name="P:XNode.Security.LoginRequestInfo.Attachments">
            <summary>
            客户端提交的附加数据
            </summary>
        </member>
        <member name="P:XNode.Security.LoginRequestInfo.RemoteAddress">
            <summary>
            客户端地址
            </summary>
        </member>
        <member name="T:XNode.Security.LoginResponseInfo">
            <summary>
            登录响应信息
            </summary>
        </member>
        <member name="P:XNode.Security.LoginResponseInfo.Body">
            <summary>
            服务端回复的主体数据
            </summary>
        </member>
        <member name="P:XNode.Security.LoginResponseInfo.Attachments">
            <summary>
            服务端回复的附加数据
            </summary>
        </member>
        <member name="T:XNode.Security.ServiceAuthorizeException">
            <summary>
            服务授权异常
            </summary>
        </member>
        <member name="P:XNode.Security.ServiceAuthorizeException.ServiceAuthorizeExceptionType">
            <summary>
            服务授权异常类型
            </summary>
        </member>
        <member name="M:XNode.Security.ServiceAuthorizeException.#ctor(XNode.Security.ServiceAuthorizeExceptionType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="type">服务授权异常类型</param>
            <param name="message">异常描述</param>
        </member>
        <member name="T:XNode.Security.ServiceAuthorizeExceptionType">
            <summary>
            服务授权异常类型
            </summary>
        </member>
        <member name="F:XNode.Security.ServiceAuthorizeExceptionType.NoAuthorize">
            <summary>
            未授权
            </summary>
        </member>
        <member name="F:XNode.Security.ServiceAuthorizeExceptionType.DateLimit">
            <summary>
            日期限制
            </summary>
        </member>
        <member name="F:XNode.Security.ServiceAuthorizeExceptionType.TimeLimit">
            <summary>
            时间限制
            </summary>
        </member>
        <member name="T:XNode.Serializer.ISerializer">
            <summary>
            序列化器接口
            </summary>
        </member>
        <member name="P:XNode.Serializer.ISerializer.Name">
            <summary>
            序列化器名称
            </summary>
        </member>
        <member name="M:XNode.Serializer.ISerializer.SerializeAsync(System.Object)">
            <summary>
            执行序列化操作
            </summary>
            <param name="obj">序列化操作的对象</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Serializer.ISerializer.DeserializeAsync(System.Type,System.Byte[])">
            <summary>
            执行反序列化操作
            </summary>
            <param name="type">反序列化的目标类型</param>
            <param name="data">反序列化操作的二进制数据</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Configuration.ActionInfo">
            <summary>
            Action配置
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ActionInfo.Name">
            <summary>
            Action名称
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ActionInfo.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ActionInfo.Enabled">
            <summary>
            Action是否启用
            配置中设置的Enabled优先级大于Attribute中的设置
            </summary>
        </member>
        <member name="T:XNode.Server.Configuration.ServerConfig">
            <summary>
            服务端配置
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServerConfig.ServerInfo">
            <summary>
            服务器基本配置
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServerConfig.Services">
            <summary>
            服务列表
            </summary>
        </member>
        <member name="T:XNode.Server.Configuration.ServerInfo">
            <summary>
            服务器基本配置
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServerInfo.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServerInfo.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="T:XNode.Server.Configuration.ServiceInfo">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServiceInfo.Name">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServiceInfo.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServiceInfo.Enabled">
            <summary>
            当前服务下的所有Action是否启用
            配置中设置的Enabled优先级大于Attribute中的设置
            </summary>
        </member>
        <member name="P:XNode.Server.Configuration.ServiceInfo.Actions">
            <summary>
            Action列表
            </summary>
        </member>
        <member name="T:XNode.Server.Configuration.ConfigurationExtensions">
            <summary>
            Server配置扩展方法
            </summary>
        </member>
        <member name="M:XNode.Server.Configuration.ConfigurationExtensions.GetServerConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Server服务配置
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.Configuration.ConfigurationExtensions.GetDefaultLoginValidatorConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取默认登录验证器配置
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.Configuration.ConfigurationExtensions.GetDefaultServiceAuthorizeConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取默认服务授权配置
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.DefaultNodeServer">
            <summary>
            XNode服务端默认实现
            </summary>
        </member>
        <member name="E:XNode.Server.DefaultNodeServer.OnStarting">
            <summary>
            XNode服务器启动前触发
            </summary>
        </member>
        <member name="E:XNode.Server.DefaultNodeServer.OnStarted">
            <summary>
            XNode服务器启动完成后触发
            </summary>
        </member>
        <member name="E:XNode.Server.DefaultNodeServer.OnStopping">
            <summary>
            XNode服务器停止前触发
            </summary>
        </member>
        <member name="E:XNode.Server.DefaultNodeServer.OnStopped">
            <summary>
            XNode服务器停止完成后触发
            </summary>
        </member>
        <member name="P:XNode.Server.DefaultNodeServer.RouteManager">
            <summary>
            获取路由管理器
            </summary>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.#ctor(XNode.Server.NodeServerConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">NodeServer配置</param>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.StartAsync">
            <summary>
            启动NodeServer
            </summary>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.StopAsync">
            <summary>
            停止NodeServer
            </summary>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.LoadServices">
            <summary>
            加载注册为XNode的服务对象
            </summary>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.ValidateConfig(XNode.Server.NodeServerConfig)">
            <summary>
            验证配置对象
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.CreateResponseDataAsync(XNode.ProtocolStack.IServiceResponse,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            创建ResponseData
            </summary>
            <param name="response"></param>
            <param name="attachments"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.CreateServiceExceptionResponseDataAsync(System.Int32)">
            <summary>
            创建异常ResponseData
            </summary>
            <param name="exceptionId"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.DefaultNodeServer.CreateSystemExceptionResponseDataAsync(System.Int32)">
            <summary>
            创建异常ResponseData
            </summary>
            <param name="exceptionId"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.DefaultServiceInvoker">
            <summary>
            服务调用器默认实现
            </summary>
        </member>
        <member name="P:XNode.Server.DefaultServiceInvoker.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:XNode.Server.DefaultServiceInvoker.Invoke(XNode.Serializer.ISerializer,XNode.Server.Route.RouteDescription,System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            调用服务
            </summary>
            <param name="serializer">序列化器</param>
            <param name="route">路由信息</param>
            <param name="paramList">服务参数列表</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.DefaultServiceProvider">
            <summary>
            服务提供器默认实现
            </summary>
        </member>
        <member name="F:XNode.Server.DefaultServiceProvider.serviceMap">
            <summary>
            服务实例映射列表
            </summary>
        </member>
        <member name="M:XNode.Server.DefaultServiceProvider.GetNodeServiceInstance(System.Type)">
            <summary>
            返回指定类型的XNode服务实例
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.DefaultServiceProvider.GetServiceTypes">
            <summary>
            获取所有服务类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.DefaultServiceProvider.RegistService(System.Type,System.Type,System.Object[])">
            <summary>
            注册XNode服务
            </summary>
            <param name="serviceType">服务对应的类或接口</param>
            <param name="instanceType">服务实例化类型。该参数可以是实现或继承serviceType的类型，当serviceType为接口时该参数不能为空</param>
            <param name="createServiceInstanceArgs">实例化服务构造函数所需的参数</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.DefaultServiceProvider.RegistService(System.Type,System.Func{System.Object})">
            <summary>
            注册XNode服务
            </summary>
            <param name="serviceType">服务对应的类或接口</param>
            <param name="createServiceInstance">创建服务实例的委托</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.DefaultServiceProvider.RegistService(System.Object)">
            <summary>
            注册XNode服务
            </summary>
            <param name="serviceObj">服务对应的实例对象</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.ServiceInvokeException">
            <summary>
            服务执行异常
            </summary>
        </member>
        <member name="M:XNode.Server.ServiceInvokeException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:XNode.Server.NodeServerExtensions">
            <summary>
            ServiceProxy扩展方法
            </summary>
        </member>
        <member name="M:XNode.Server.NodeServerExtensions.EnableAll(XNode.Server.INodeServer)">
            <summary>
            将所有服务设置为启用，可在运行时动态设置服务
            </summary>
            <param name="nodeServer"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerExtensions.DisableAll(XNode.Server.INodeServer)">
            <summary>
            将所有服务设置为禁用，可在运行时动态设置服务
            </summary>
            <param name="nodeServer"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerExtensions.Enable(XNode.Server.INodeServer,System.Int32,System.Nullable{System.Int32})">
            <summary>
            将指定服务设置为启用
            </summary>
            <param name="nodeServer"></param>
            <param name="serviceId"></param>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerExtensions.Disable(XNode.Server.INodeServer,System.Int32,System.Nullable{System.Int32})">
            <summary>
            将指定服务设置为禁用
            </summary>
            <param name="nodeServer"></param>
            <param name="serviceId"></param>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.TypeExtensions">
            <summary>
            Type扩展方法类
            </summary>
        </member>
        <member name="M:XNode.Server.TypeExtensions.IsNodeServiceType(System.Type)">
            <summary>
            判断指定类型是否能实例化为XNode服务
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.TypeExtensions.GetServiceAttribute(System.Type)">
            <summary>
            获取XNode服务的Attribute
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.NodeServerStartDelegate">
            <summary>
            NodeServer启动时触发的委托
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:XNode.Server.NodeServerStopDelegate">
            <summary>
            NodeServer停止时触发的委托
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:XNode.Server.INodeServer">
            <summary>
            XNode服务端接口
            </summary>
        </member>
        <member name="E:XNode.Server.INodeServer.OnStarting">
            <summary>
            XNode服务器启动前触发
            </summary>
        </member>
        <member name="E:XNode.Server.INodeServer.OnStarted">
            <summary>
            XNode服务器启动完成后触发
            </summary>
        </member>
        <member name="E:XNode.Server.INodeServer.OnStopping">
            <summary>
            XNode服务器停止前触发
            </summary>
        </member>
        <member name="E:XNode.Server.INodeServer.OnStopped">
            <summary>
            XNode服务器停止完成后触发
            </summary>
        </member>
        <member name="P:XNode.Server.INodeServer.RouteManager">
            <summary>
            获取路由管理器
            </summary>
        </member>
        <member name="M:XNode.Server.INodeServer.StartAsync">
            <summary>
            启动XNode服务器
            </summary>
        </member>
        <member name="M:XNode.Server.INodeServer.StopAsync">
            <summary>
            关闭XNode服务器
            </summary>
        </member>
        <member name="T:XNode.Server.NodeServerStartEventArg">
            <summary>
            服务器启动事件参数
            </summary>
        </member>
        <member name="M:XNode.Server.NodeServerStartEventArg.#ctor(System.String,System.Int32,System.Collections.Generic.IEnumerable{XNode.Server.Route.RouteDescription})">
            <summary>
            构造函数
            </summary>
            <param name="host">服务地址</param>
            <param name="port">服务端口</param>
            <param name="routes">服务路由</param>
        </member>
        <member name="P:XNode.Server.NodeServerStartEventArg.Host">
            <summary>
            获取服务地址
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerStartEventArg.Port">
            <summary>
            获取服务端口
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerStartEventArg.Routes">
            <summary>
            获取服务路由
            </summary>
        </member>
        <member name="T:XNode.Server.NodeServerStopEventArg">
            <summary>
            服务器停止事件参数
            </summary>
        </member>
        <member name="M:XNode.Server.NodeServerStopEventArg.#ctor(System.String,System.Int32,System.Collections.Generic.IEnumerable{XNode.Server.Route.RouteDescription})">
            <summary>
            构造函数
            </summary>
            <param name="host">服务地址</param>
            <param name="port">服务端口</param>
            <param name="routes">服务路由</param>
        </member>
        <member name="P:XNode.Server.NodeServerStopEventArg.Host">
            <summary>
            获取服务地址
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerStopEventArg.Port">
            <summary>
            获取服务端口
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerStopEventArg.Routes">
            <summary>
            获取服务路由
            </summary>
        </member>
        <member name="T:XNode.Server.INodeServerBuilder">
            <summary>
            XNode服务端构造接口
            </summary>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigServerInfo(System.String,System.Int32)">
            <summary>
            配置服务器基本信息
            </summary>
            <param name="host">服务器地址</param>
            <param name="port">服务器端口</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ApplyConfig(XNode.Server.Configuration.ServerConfig)">
            <summary>
            应用服务端配置
            </summary>
            <param name="serverConfig">服务端配置</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigNodeServerFactory(System.Func{XNode.Server.NodeServerConfig,XNode.Server.INodeServer})">
            <summary>
            配置XNode服务器工厂
            </summary>
            <param name="factory">XNode服务器工厂</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigServiceProvider(XNode.Server.IServiceProvider)">
            <summary>
            配置服务提供器
            </summary>
            <param name="serviceProvider">服务提供器实例</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigProtocolStackFactory(XNode.ProtocolStack.IProtocolStackFactory)">
            <summary>
            配置协议栈工厂
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigRouteFactory(XNode.Server.Route.IRouteFactory)">
            <summary>
            配置路由工厂
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigSerializer(XNode.Serializer.ISerializer)">
            <summary>
            配置序列化器
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.AddServiceProcessor(XNode.Server.IServiceProcessor)">
            <summary>
            添加服务处理器
            </summary>
            <param name="serviceProcessor"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigServiceInvoker(XNode.Server.IServiceInvoker)">
            <summary>
            配置服务调用器
            </summary>
            <param name="serviceInvoker"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigLoginValidator(XNode.Security.ILoginValidator)">
            <summary>
            配置登录验证器
            </summary>
            <param name="loginValidator"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.ConfigCommunication(XNode.Communication.IServer)">
            <summary>
            配置底层通信组件
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.INodeServerBuilder.Build">
            <summary>
            构造XNode服务端实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.IServiceInvoker">
            <summary>
            服务调用器接口
            </summary>
        </member>
        <member name="P:XNode.Server.IServiceInvoker.ServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:XNode.Server.IServiceInvoker.Invoke(XNode.Serializer.ISerializer,XNode.Server.Route.RouteDescription,System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            调用服务
            </summary>
            <param name="serializer">序列化器</param>
            <param name="route">路由信息</param>
            <param name="paramList">服务参数列表</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.IServiceProcessor">
            <summary>
            服务处理器接口
            </summary>
        </member>
        <member name="P:XNode.Server.IServiceProcessor.ProtocolStackFactory">
            <summary>
            协议栈工厂
            </summary>
        </member>
        <member name="P:XNode.Server.IServiceProcessor.Serializer">
            <summary>
            序列化器
            </summary>
        </member>
        <member name="P:XNode.Server.IServiceProcessor.ServiceInvoker">
            <summary>
            服务调用器
            </summary>
        </member>
        <member name="P:XNode.Server.IServiceProcessor.Next">
            <summary>
            下一个服务处理器
            </summary>
        </member>
        <member name="M:XNode.Server.IServiceProcessor.ProcessAsync(XNode.Server.ServiceContext)">
            <summary>
            对服务请求进行处理
            </summary>
            <param name="context">服务上下文，每次服务调用共享一个实例</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.IServiceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:XNode.Server.IServiceProvider.GetNodeServiceTypes">
            <summary>
            返回所有需要注册为XNode服务的实例类型，必须为可实例化的Class
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.IServiceProvider.GetNodeServiceInstance(System.Type)">
            <summary>
            返回指定类型的XNode服务实例
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.NodeServerBuilder">
            <summary>
            XNode服务端构造类
            </summary>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigServerInfo(System.String,System.Int32)">
            <summary>
            配置服务器基本信息
            </summary>
            <param name="host">服务器地址</param>
            <param name="port">服务器端口</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ApplyConfig(XNode.Server.Configuration.ServerConfig)">
            <summary>
            应用服务端配置
            </summary>
            <param name="serverConfig">服务端配置</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigNodeServerFactory(System.Func{XNode.Server.NodeServerConfig,XNode.Server.INodeServer})">
            <summary>
            配置服务器工厂
            </summary>
            <param name="factory">XNode服务器工厂</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigServiceProvider(XNode.Server.IServiceProvider)">
            <summary>
            配置服务提供器
            </summary>
            <param name="serviceProvider">服务提供器实例</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigProtocolStackFactory(XNode.ProtocolStack.IProtocolStackFactory)">
            <summary>
            配置协议栈工厂
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigRouteFactory(XNode.Server.Route.IRouteFactory)">
            <summary>
            配置路由工厂
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigSerializer(XNode.Serializer.ISerializer)">
            <summary>
            配置序列化器
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.AddServiceProcessor(XNode.Server.IServiceProcessor)">
            <summary>
            添加服务处理器
            </summary>
            <param name="serviceProcessor"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigServiceInvoker(XNode.Server.IServiceInvoker)">
            <summary>
            配置服务调用器
            </summary>
            <param name="serviceInvoker"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigLoginValidator(XNode.Security.ILoginValidator)">
            <summary>
            配置登录验证器
            </summary>
            <param name="loginValidator"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.ConfigCommunication(XNode.Communication.IServer)">
            <summary>
            配置底层服务端通信组件
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.NodeServerBuilder.Build">
            <summary>
            构造XNode服务端实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.NodeServerConfig">
            <summary>
            XNode服务端配置类
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.ServiceConfigs">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.ServiceProvider">
            <summary>
            服务提供器实例
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.ProtocolStackFactory">
            <summary>
            协议栈工厂实例
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.RouteFactory">
            <summary>
            路由工厂实例
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.Serializer">
            <summary>
            序列化器实例
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.ServiceProcessor">
            <summary>
            服务处理器实例
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.ServiceInvoker">
            <summary>
            服务调用器实例
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.LoginValidator">
            <summary>
            登录验证器实例
            </summary>
        </member>
        <member name="P:XNode.Server.NodeServerConfig.Communication">
            <summary>
            服务端底层通信实现
            </summary>
        </member>
        <member name="T:XNode.Server.Processors.DefaultServiceProcessor">
            <summary>
            服务处理器默认实现
            </summary>
        </member>
        <member name="M:XNode.Server.Processors.DefaultServiceProcessor.ProcessAsync(XNode.Server.ServiceContext)">
            <summary>
            对服务请求进行处理，根据路由信息调用合适的服务实现
            </summary>
            <param name="context">服务上下文，每次服务调用共享一个实例</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Processors.ServiceAuthorizeProcessor">
            <summary>
            服务授权验证处理器
            </summary>
        </member>
        <member name="M:XNode.Server.Processors.ServiceAuthorizeProcessor.#ctor(XNode.Security.IServiceAuthorizer)">
            <summary>
            构造函数
            </summary>
            <param name="serviceAuthorizer">服务验证器</param>
        </member>
        <member name="M:XNode.Server.Processors.ServiceAuthorizeProcessor.ProcessAsync(XNode.Server.ServiceContext)">
            <summary>
            服务授权验证
            </summary>
            <param name="context">服务上下文，每次服务调用共享一个实例</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Route.DefaultRouteDescriptor">
            <summary>
            默认实现
            支持从Service类实例中搜索所有公共、非公共以及继承链类型中的公共、受保护拥有ActionAttribute的实例方法作为Action
            </summary>
        </member>
        <member name="M:XNode.Server.Route.DefaultRouteDescriptor.SetServiceConfig(System.Collections.Generic.IList{XNode.Server.Configuration.ServiceInfo})">
            <summary>
            设置服务相关配置
            </summary>
            <param name="serviceConfigs"></param>
        </member>
        <member name="M:XNode.Server.Route.DefaultRouteDescriptor.CreateRouteDescription(System.Type)">
            <summary>
            创建路由描述信息
            </summary>
            <param name="serviceType">服务对象类型</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Route.DefaultRouteFactory">
            <summary>
            路由工厂默认实现
            </summary>
        </member>
        <member name="M:XNode.Server.Route.DefaultRouteFactory.CreateRouteManager">
            <summary>
            创建路由管理器对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.Route.DefaultRouteFactory.CreateRouteDescriptor">
            <summary>
            创建路由描述器对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Route.DefaultRouteManager">
            <summary>
            默认实现
            支持同一个SerivceId设置在不同的类实例上
            同一个Service下的Action编号必须唯一（即使ServiceId设置在不同的类实例上）
            </summary>
        </member>
        <member name="M:XNode.Server.Route.DefaultRouteManager.AddRoute(XNode.Server.Route.RouteDescription)">
            <summary>
            添加路由
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:XNode.Server.Route.DefaultRouteManager.GetRoute(System.Int32,System.Int32)">
            <summary>
            获取指定路由
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.Route.DefaultRouteManager.GetAllRoutes">
            <summary>
            获取所有路由
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Route.IRouteDescriptor">
            <summary>
            路由描述器接口
            </summary>
        </member>
        <member name="M:XNode.Server.Route.IRouteDescriptor.CreateRouteDescription(System.Type)">
            <summary>
            创建路由描述信息
            </summary>
            <param name="serviceType">服务对象类型</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.Route.IRouteDescriptor.SetServiceConfig(System.Collections.Generic.IList{XNode.Server.Configuration.ServiceInfo})">
            <summary>
            设置服务相关配置
            </summary>
            <param name="serviceConfigs"></param>
        </member>
        <member name="T:XNode.Server.Route.IRouteFactory">
            <summary>
            路由工厂
            </summary>
        </member>
        <member name="M:XNode.Server.Route.IRouteFactory.CreateRouteDescriptor">
            <summary>
            创建路由描述器对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.Route.IRouteFactory.CreateRouteManager">
            <summary>
            创建路由管理器对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Route.IRouteManager">
            <summary>
            路由管理器接口
            </summary>
        </member>
        <member name="M:XNode.Server.Route.IRouteManager.AddRoute(XNode.Server.Route.RouteDescription)">
            <summary>
            添加路由
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:XNode.Server.Route.IRouteManager.GetRoute(System.Int32,System.Int32)">
            <summary>
            获取指定路由
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.Route.IRouteManager.GetAllRoutes">
            <summary>
            获取所有路由
            </summary>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.Route.RouteDescription">
            <summary>
            路由描述对象
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteDescription.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteDescription.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteDescription.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteDescription.ActionName">
            <summary>
            Action名称
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteDescription.ServiceType">
            <summary>
            服务对象类型
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteDescription.ActionType">
            <summary>
            Action对象类型
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteDescription.Enabled">
            <summary>
            Action是否启用
            </summary>
        </member>
        <member name="T:XNode.Server.Route.RouteNotFoundException">
            <summary>
            服务路由未找到异常类
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteNotFoundException.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteNotFoundException.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="M:XNode.Server.Route.RouteNotFoundException.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
        </member>
        <member name="T:XNode.Server.Route.RouteRepeatException">
            <summary>
            服务路由重复异常类
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteRepeatException.ServiceId">
            <summary>
            服务Id
            </summary>
        </member>
        <member name="P:XNode.Server.Route.RouteRepeatException.ActionId">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="M:XNode.Server.Route.RouteRepeatException.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="serviceId">服务Id</param>
            <param name="actionId">ActionId</param>
        </member>
        <member name="T:XNode.Server.ServiceContext">
            <summary>
            服务上下文，每次服务调用请求共享一个实例
            </summary>
        </member>
        <member name="M:XNode.Server.ServiceContext.#ctor(System.String,System.Int32,System.String,System.Net.IPEndPoint,XNode.Server.Route.RouteDescription,System.Collections.Generic.IList{System.Byte[]},System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            构造函数
            </summary>
            <param name="host">服务地址</param>
            <param name="port">服务端口</param>
            <param name="identity">身份标识</param>
            <param name="remoteAddress">客户端地址</param>
            <param name="route">服务路由信息</param>
            <param name="actionParamList">Action请求所传递的参数列表</param>
            <param name="attachments">服务请求所传递的附加数据</param>
        </member>
        <member name="P:XNode.Server.ServiceContext.Current">
            <summary>
            获取当前服务上下文
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.Host">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.Identity">
            <summary>
            身份标识
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.RemoteAddress">
            <summary>
            客户端地址
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.Route">
            <summary>
            服务路由信息
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.ActionParamList">
            <summary>
            Action请求所传递的参数列表
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.Attachments">
            <summary>
            服务请求所传递的附加数据
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceContext.Data">
            <summary>
            用于服务调用过程中共享的数据
            </summary>
        </member>
        <member name="T:XNode.Server.ServiceProcessorBase">
            <summary>
            服务处理器基类
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceProcessorBase.ProtocolStackFactory">
            <summary>
            协议栈工厂
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceProcessorBase.Serializer">
            <summary>
            序列化器
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceProcessorBase.ServiceInvoker">
            <summary>
            服务调用器
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceProcessorBase.Next">
            <summary>
            下一个服务处理器
            </summary>
        </member>
        <member name="M:XNode.Server.ServiceProcessorBase.ProcessAsync(XNode.Server.ServiceContext)">
            <summary>
            对服务请求进行处理
            </summary>
            <param name="context">服务上下文，每次服务调用共享一个实例</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.ServiceProcessorUtils">
            <summary>
            服务处理器相关工具类
            </summary>
        </member>
        <member name="M:XNode.Server.ServiceProcessorUtils.CreateServiceExceptionResult(System.Int32,XNode.ProtocolStack.IProtocolStackFactory)">
            <summary>
            创建异常ServiceProcessResult
            </summary>
            <param name="exceptionId">异常Id</param>
            <param name="protocolStackFactory">协议栈工厂</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.ServiceProcessorUtils.CreateSystemExceptionResult(System.Int32,XNode.ProtocolStack.IProtocolStackFactory)">
            <summary>
            创建异常ServiceProcessResult
            </summary>
            <param name="exceptionId">异常Id</param>
            <param name="protocolStackFactory">协议栈工厂</param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.ServiceProcessorUtils.CreateExceptionResult(System.Int32,System.String,XNode.ProtocolStack.IProtocolStackFactory)">
            <summary>
            创建异常ServiceProcessResult
            </summary>
            <param name="exceptionId">异常Id</param>
            <param name="exceptionMessage">异常信息</param>
            <param name="protocolStackFactory">协议栈工厂</param>
            <returns></returns>
        </member>
        <member name="T:XNode.Server.ServiceProcessResult">
            <summary>
            服务处理结果
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceProcessResult.ServiceResponse">
            <summary>
            服务响应对象
            </summary>
        </member>
        <member name="P:XNode.Server.ServiceProcessResult.Attachments">
            <summary>
            服务处理附加数据
            </summary>
        </member>
        <member name="T:XNode.Server.ServiceProviderBase">
            <summary>
            服务提供器基类
            </summary>
        </member>
        <member name="M:XNode.Server.ServiceProviderBase.GetNodeServiceInstance(System.Type)">
            <summary>
            返回指定类型的XNode服务实例
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.ServiceProviderBase.GetNodeServiceTypes">
            <summary>
            返回所有需要注册为XNode服务的实例类型，必须为可实例化的Class
            </summary>
            <returns></returns>
        </member>
        <member name="M:XNode.Server.ServiceProviderBase.GetServiceTypes">
            <summary>
            返回所有需要注册为XNode服务的实例类型，必须为可实例化的Class
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
